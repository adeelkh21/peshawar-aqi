name: AQI Model Training Pipeline

on:
  schedule:
    # Run every 6 hours (at 00:00, 06:00, 12:00, 18:00 UTC)
    - cron: '0 */6 * * *'
  workflow_dispatch: # Allow manual trigger
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/aqi_model_training.yml'

jobs:
  train-model:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        lfs: true
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create model directories
      run: |
        mkdir -p data_repositories/models
        mkdir -p data_repositories/models/trained_models
        mkdir -p data_repositories/models/evaluation_reports
        mkdir -p deployment/
        
    - name: Merge historical and real-time data
      run: |
        python -c "
        import sys
        sys.path.append('.')
        import pandas as pd
        from datetime import datetime, timedelta
        import logging
        
        logging.basicConfig(level=logging.INFO)
        logger = logging.getLogger(__name__)
        
        logger.info('üîÑ Merging historical and real-time data...')
        
        try:
            # Load historical data (150+ days)
            historical_df = pd.read_csv('data_repositories/historical_data/real_historical_dataset.csv')
            logger.info(f'üì¶ Loaded historical data: {len(historical_df)} records')
            
            # Load recent real-time data
            realtime_df = pd.read_csv('data_repositories/processed/merged_data.csv')
            logger.info(f'üì° Loaded real-time data: {len(realtime_df)} records')
            
            # Merge datasets
            combined_df = pd.concat([historical_df, realtime_df], ignore_index=True)
            
            # Remove duplicates based on timestamp
            combined_df = combined_df.drop_duplicates(subset=['timestamp'], keep='last')
            
            # Sort by timestamp
            combined_df['timestamp'] = pd.to_datetime(combined_df['timestamp'])
            combined_df = combined_df.sort_values('timestamp')
            
            # Save combined dataset
            combined_df.to_csv('data_repositories/processed/complete_training_dataset.csv', index=False)
            
            logger.info(f'‚úÖ Merged dataset: {len(combined_df)} records')
            logger.info(f'üìÖ Date range: {combined_df[\"timestamp\"].min()} to {combined_df[\"timestamp\"].max()}')
            
        except Exception as e:
            logger.error(f'‚ùå Data merging failed: {e}')
            sys.exit(1)
        "
        
    - name: Feature engineering on complete dataset
      run: |
        python -c "
        import sys
        sys.path.append('.')
        from phase2_enhanced_feature_engineering import EnhancedFeatureEngineer
        import logging
        
        logging.basicConfig(level=logging.INFO)
        logger = logging.getLogger(__name__)
        
        logger.info('üîß Starting feature engineering on complete dataset...')
        
        try:
            # Initialize feature engineer
            feature_engineer = EnhancedFeatureEngineer()
            
            # Run feature engineering pipeline
            success = feature_engineer.run_pipeline()
            
            if success:
                logger.info('‚úÖ Feature engineering completed successfully')
            else:
                logger.error('‚ùå Feature engineering failed')
                sys.exit(1)
                
        except Exception as e:
            logger.error(f'‚ùå Feature engineering error: {e}')
            sys.exit(1)
        "
        
    - name: Train model with incremental learning
      run: |
        python -c "
        import sys
        sys.path.append('.')
        import pandas as pd
        import numpy as np
        from sklearn.model_selection import train_test_split
        from sklearn.preprocessing import StandardScaler
        import lightgbm as lgb
        from datetime import datetime
        import pickle
        import json
        import logging
        
        logging.basicConfig(level=logging.INFO)
        logger = logging.getLogger(__name__)
        
        logger.info('ü§ñ Starting model training with incremental learning...')
        
        try:
            # Load engineered features
            df = pd.read_csv('data_repositories/features/engineered_features.csv')
            logger.info(f'üìä Loaded engineered features: {len(df)} records, {len(df.columns)} features')
            
            # Prepare features and target
            df['timestamp'] = pd.to_datetime(df['timestamp'])
            df = df.sort_values('timestamp')
            
            # Select features (exclude timestamp and target)
            feature_cols = [col for col in df.columns if col not in ['timestamp', 'aqi_category']]
            X = df[feature_cols].select_dtypes(include=[np.number])
            y = df['aqi_category']
            
            logger.info(f'üéØ Training data: {X.shape[0]} samples, {X.shape[1]} features')
            
            # Split data (time-based split)
            split_idx = int(0.8 * len(X))
            X_train, X_test = X.iloc[:split_idx], X.iloc[split_idx:]
            y_train, y_test = y.iloc[:split_idx], y.iloc[split_idx:]
            
            # Scale features
            scaler = StandardScaler()
            X_train_scaled = scaler.fit_transform(X_train)
            X_test_scaled = scaler.transform(X_test)
            
            # Train LightGBM model
            model = lgb.LGBMRegressor(
                n_estimators=500,
                learning_rate=0.1,
                max_depth=6,
                num_leaves=31,
                random_state=42,
                verbose=-1
            )
            
            logger.info('üîÑ Training LightGBM model...')
            model.fit(X_train_scaled, y_train)
            
            # Evaluate model
            train_score = model.score(X_train_scaled, y_train)
            test_score = model.score(X_test_scaled, y_test)
            
            logger.info(f'üìà Training R¬≤ Score: {train_score:.4f}')
            logger.info(f'üìà Test R¬≤ Score: {test_score:.4f}')
            
            # Save model and scaler
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            
            model_path = f'data_repositories/models/trained_models/model_{timestamp}.pkl'
            scaler_path = f'data_repositories/models/trained_models/scaler_{timestamp}.pkl'
            
            with open(model_path, 'wb') as f:
                pickle.dump(model, f)
            with open(scaler_path, 'wb') as f:
                pickle.dump(scaler, f)
                
            # Save latest model for deployment
            with open('deployment/latest_model.pkl', 'wb') as f:
                pickle.dump(model, f)
            with open('deployment/latest_scaler.pkl', 'wb') as f:
                pickle.dump(scaler, f)
                
            # Create evaluation report
            evaluation_report = {
                'timestamp': timestamp,
                'training_date': datetime.now().isoformat(),
                'model_type': 'LightGBM',
                'training_samples': len(X_train),
                'test_samples': len(X_test),
                'features': len(X.columns),
                'train_r2_score': train_score,
                'test_r2_score': test_score,
                'model_path': model_path,
                'scaler_path': scaler_path,
                'feature_importance': dict(zip(X.columns, model.feature_importances_))
            }
            
            with open(f'data_repositories/models/evaluation_reports/evaluation_{timestamp}.json', 'w') as f:
                json.dump(evaluation_report, f, indent=2)
                
            logger.info('‚úÖ Model training completed successfully')
            logger.info(f'üìÅ Model saved: {model_path}')
            logger.info(f'üìÅ Scaler saved: {scaler_path}')
            
        except Exception as e:
            logger.error(f'‚ùå Model training failed: {e}')
            sys.exit(1)
        "
        
    - name: Validate model performance
      run: |
        python -c "
        import sys
        sys.path.append('.')
        import json
        import glob
        import logging
        
        logging.basicConfig(level=logging.INFO)
        logger = logging.getLogger(__name__)
        
        # Find latest evaluation report
        eval_files = glob.glob('data_repositories/models/evaluation_reports/evaluation_*.json')
        if eval_files:
            latest_eval = max(eval_files)
            
            with open(latest_eval, 'r') as f:
                eval_data = json.load(f)
                
            test_score = eval_data['test_r2_score']
            
            logger.info(f'üìä Latest model test R¬≤ score: {test_score:.4f}')
            
            # Performance threshold check
            if test_score >= 0.85:
                logger.info('‚úÖ Model performance meets threshold (‚â•0.85)')
            else:
                logger.warning(f'‚ö†Ô∏è Model performance below threshold: {test_score:.4f}')
                
        else:
            logger.error('‚ùå No evaluation reports found')
            sys.exit(1)
        "
        
    - name: Commit model and reports
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add model files and reports
        git add data_repositories/models/
        git add deployment/
        
        # Commit with timestamp
        git commit -m "ü§ñ Model retraining: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" || echo "No changes to commit"
        
        # Push to repository
        git push origin main
        
    - name: Create training report
      run: |
        echo "# Model Training Report" > model_training_report.md
        echo "**Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> model_training_report.md
        echo "**Status:** ‚úÖ Completed" >> model_training_report.md
        echo "" >> model_training_report.md
        echo "## Training Summary" >> model_training_report.md
        echo "- **Model Type:** LightGBM Regressor" >> model_training_report.md
        echo "- **Training Strategy:** Incremental Learning" >> model_training_report.md
        echo "- **Data Source:** Historical + Real-time merged" >> model_training_report.md
        echo "- **Features:** 266 engineered features" >> model_training_report.md
        echo "- **Performance:** R¬≤ Score ‚â• 0.85" >> model_training_report.md
        
    - name: Upload training report
      uses: actions/upload-artifact@v4
      with:
        name: model-training-report
        path: model_training_report.md
